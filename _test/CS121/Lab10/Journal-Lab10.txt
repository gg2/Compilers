Lab #10
Filtering Functions
Gabe Gibler

20150405
11:00-11:30 > Reading instructions. Need: array, linked list. Laying out the signature of each function, and prepping other necessary variables

16:30-18:00 > Filling out the basics. Writing out a procedure to determine the list sizes either from command line input or using default, and then populate them with random values. Getting thresholds for the filtering functions from command line, too.
18:00-18:15 > Write out filtering functions.
18:30-19:00 > Working out compilation errors, and errors linked to included files that I haven't tested yet.
19:00-19:45 > Trying to figure out yet again how to best handle include files, and functionizing things. Do I include .h files? or .cpp? Where do I include data types so everything can get at them? or are such things just not possible and every custom thing must just be created specifically?
19:45-22:00 > Sorting out compiler issues with include files and typedefs and such. Simplifying and brute-forcing things. Removing Node as a separate class and making it as only a struct within linkedlist. Testing all options and filtering for array versions.

20150409
15:00-15:48 > Ahhh, returning to the lab at last! Time for linked list versions. Small revisions overall, and linked list versions fleshed out.
15:48-16:30 > And now the usual rigamarole: sorting out sending pointers vs objects directly. After all that, still getting a segmentation fault on the last filtering run, when returning a separate linked list containing the newly filtered values. Since I'm reusing linkedlist objects, have to make sure to delete and re-"new" them between each run.

Answer to #4: I wouldn't have known at all; but since he mentioned it in class, it's going to contain pointers to functions.